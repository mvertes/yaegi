// Code generated by 'yaegi extract slices'. DO NOT EDIT.

//go:build go1.21
// +build go1.21

package stdlib

import (
	"reflect"
	"slices"
)

func init() {
	Symbols["slices/slices"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BinarySearch":     reflect.ValueOf(slices.BinarySearch),
		"BinarySearchFunc": reflect.ValueOf(slices.BinarySearchFunc),
		"Clip":             reflect.ValueOf(slices.Clip),
		"Clone":            reflect.ValueOf(slices.Clone),
		"Compact":          reflect.ValueOf(slices.Compact),
		"CompactFunc":      reflect.ValueOf(slices.CompactFunc),
		"Compare":          reflect.ValueOf(slices.Compare),
		"CompareFunc":      reflect.ValueOf(slices.CompareFunc),
		"Contains":         reflect.ValueOf(slices.Contains),
		"ContainsFunc":     reflect.ValueOf(slices.ContainsFunc),
		"Delete":           reflect.ValueOf(slices.Delete),
		"DeleteFunc":       reflect.ValueOf(slices.DeleteFunc),
		"Equal":            reflect.ValueOf(slices.Equal),
		"EqualFunc":        reflect.ValueOf(slices.EqualFunc),
		"Grow":             reflect.ValueOf(slices.Grow),
		"Index":            reflect.ValueOf(slices.Index),
		"IndexFunc":        reflect.ValueOf(slices.IndexFunc),
		"Insert":           reflect.ValueOf(slices.Insert),
		"IsSorted":         reflect.ValueOf(slices.IsSorted),
		"IsSortedFunc":     reflect.ValueOf(slices.IsSortedFunc),
		"Max":              reflect.ValueOf(slices.Max),
		"MaxFunc":          reflect.ValueOf(slices.MaxFunc),
		"Min":              reflect.ValueOf(slices.Min),
		"MinFunc":          reflect.ValueOf(slices.MinFunc),
		"Replace":          reflect.ValueOf(slices.Replace),
		"Reverse":          reflect.ValueOf(slices.Reverse),
		"Sort":             reflect.ValueOf(slices.Sort),
		"SortFunc":         reflect.ValueOf(slices.SortFunc),
		"SortStableFunc":   reflect.ValueOf(slices.SortStableFunc),
	}
}
