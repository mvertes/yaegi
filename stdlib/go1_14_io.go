// Code generated by 'goexports io'. DO NOT EDIT.

// +build go1.14,!go1.15

package stdlib

import (
	"go/constant"
	"go/token"
	"io"
	"reflect"

	"github.com/containous/yaegi/interp"
)

func init() {
	Symbols["io"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Copy":             reflect.ValueOf(io.Copy),
		"CopyBuffer":       reflect.ValueOf(io.CopyBuffer),
		"CopyN":            reflect.ValueOf(io.CopyN),
		"EOF":              reflect.ValueOf(&io.EOF).Elem(),
		"ErrClosedPipe":    reflect.ValueOf(&io.ErrClosedPipe).Elem(),
		"ErrNoProgress":    reflect.ValueOf(&io.ErrNoProgress).Elem(),
		"ErrShortBuffer":   reflect.ValueOf(&io.ErrShortBuffer).Elem(),
		"ErrShortWrite":    reflect.ValueOf(&io.ErrShortWrite).Elem(),
		"ErrUnexpectedEOF": reflect.ValueOf(&io.ErrUnexpectedEOF).Elem(),
		"LimitReader":      reflect.ValueOf(io.LimitReader),
		"MultiReader":      reflect.ValueOf(io.MultiReader),
		"MultiWriter":      reflect.ValueOf(io.MultiWriter),
		"NewSectionReader": reflect.ValueOf(io.NewSectionReader),
		"Pipe":             reflect.ValueOf(io.Pipe),
		"ReadAtLeast":      reflect.ValueOf(io.ReadAtLeast),
		"ReadFull":         reflect.ValueOf(io.ReadFull),
		"SeekCurrent":      reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"SeekEnd":          reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"SeekStart":        reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"TeeReader":        reflect.ValueOf(io.TeeReader),
		"WriteString":      reflect.ValueOf(io.WriteString),

		// type definitions
		"ByteReader":      reflect.ValueOf((*io.ByteReader)(nil)),
		"ByteScanner":     reflect.ValueOf((*io.ByteScanner)(nil)),
		"ByteWriter":      reflect.ValueOf((*io.ByteWriter)(nil)),
		"Closer":          reflect.ValueOf((*io.Closer)(nil)),
		"LimitedReader":   reflect.ValueOf((*io.LimitedReader)(nil)),
		"PipeReader":      reflect.ValueOf((*io.PipeReader)(nil)),
		"PipeWriter":      reflect.ValueOf((*io.PipeWriter)(nil)),
		"ReadCloser":      reflect.ValueOf((*io.ReadCloser)(nil)),
		"ReadSeeker":      reflect.ValueOf((*io.ReadSeeker)(nil)),
		"ReadWriteCloser": reflect.ValueOf((*io.ReadWriteCloser)(nil)),
		"ReadWriteSeeker": reflect.ValueOf((*io.ReadWriteSeeker)(nil)),
		"ReadWriter":      reflect.ValueOf((*io.ReadWriter)(nil)),
		"Reader":          reflect.ValueOf((*io.Reader)(nil)),
		"ReaderAt":        reflect.ValueOf((*io.ReaderAt)(nil)),
		"ReaderFrom":      reflect.ValueOf((*io.ReaderFrom)(nil)),
		"RuneReader":      reflect.ValueOf((*io.RuneReader)(nil)),
		"RuneScanner":     reflect.ValueOf((*io.RuneScanner)(nil)),
		"SectionReader":   reflect.ValueOf((*io.SectionReader)(nil)),
		"Seeker":          reflect.ValueOf((*io.Seeker)(nil)),
		"StringWriter":    reflect.ValueOf((*io.StringWriter)(nil)),
		"WriteCloser":     reflect.ValueOf((*io.WriteCloser)(nil)),
		"WriteSeeker":     reflect.ValueOf((*io.WriteSeeker)(nil)),
		"Writer":          reflect.ValueOf((*io.Writer)(nil)),
		"WriterAt":        reflect.ValueOf((*io.WriterAt)(nil)),
		"WriterTo":        reflect.ValueOf((*io.WriterTo)(nil)),
	}
}

func (_w Wrapper) UnreadByte() error {
	_f := interp.Method("UnreadByte", _w.Wrap).(func() error)
	return _f()
}

func (_w Wrapper) WriteByte(c byte) error {
	_f := interp.Method("WriteByte", _w.Wrap).(func(c byte) error)
	return _f(c)
}

func (_w Wrapper) Seek(offset int64, whence int) (int64, error) {
	_f := interp.Method("Seek", _w.Wrap).(func(offset int64, whence int) (int64, error))
	return _f(offset, whence)
}

func (_w Wrapper) ReadAt(p []byte, off int64) (n int, err error) {
	_f := interp.Method("ReadAt", _w.Wrap).(func(p []byte, off int64) (n int, err error))
	return _f(p, off)
}

func (_w Wrapper) ReadFrom(r io.Reader) (n int64, err error) {
	_f := interp.Method("ReadFrom", _w.Wrap).(func(r io.Reader) (n int64, err error))
	return _f(r)
}

func (_w Wrapper) WriteString(s string) (n int, err error) {
	_f := interp.Method("WriteString", _w.Wrap).(func(s string) (n int, err error))
	return _f(s)
}

func (_w Wrapper) WriteAt(p []byte, off int64) (n int, err error) {
	_f := interp.Method("WriteAt", _w.Wrap).(func(p []byte, off int64) (n int, err error))
	return _f(p, off)
}

func (_w Wrapper) WriteTo(w io.Writer) (n int64, err error) {
	_f := interp.Method("WriteTo", _w.Wrap).(func(w io.Writer) (n int64, err error))
	return _f(w)
}
