// Code generated by 'goexports encoding/binary'. DO NOT EDIT.

// +build go1.14,!go1.15

package stdlib

import (
	"encoding/binary"
	"go/constant"
	"go/token"
	"reflect"

	"github.com/containous/yaegi/interp"
)

func init() {
	Symbols["encoding/binary"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BigEndian":      reflect.ValueOf(&binary.BigEndian).Elem(),
		"LittleEndian":   reflect.ValueOf(&binary.LittleEndian).Elem(),
		"MaxVarintLen16": reflect.ValueOf(constant.MakeFromLiteral("3", token.INT, 0)),
		"MaxVarintLen32": reflect.ValueOf(constant.MakeFromLiteral("5", token.INT, 0)),
		"MaxVarintLen64": reflect.ValueOf(constant.MakeFromLiteral("10", token.INT, 0)),
		"PutUvarint":     reflect.ValueOf(binary.PutUvarint),
		"PutVarint":      reflect.ValueOf(binary.PutVarint),
		"Read":           reflect.ValueOf(binary.Read),
		"ReadUvarint":    reflect.ValueOf(binary.ReadUvarint),
		"ReadVarint":     reflect.ValueOf(binary.ReadVarint),
		"Size":           reflect.ValueOf(binary.Size),
		"Uvarint":        reflect.ValueOf(binary.Uvarint),
		"Varint":         reflect.ValueOf(binary.Varint),
		"Write":          reflect.ValueOf(binary.Write),

		// type definitions
		"ByteOrder": reflect.ValueOf((*binary.ByteOrder)(nil)),
	}
}
func (_w Wrapper) PutUint16(a0 []byte, a1 uint16) {
	_f := interp.Method("PutUint16", _w.Wrap).(func(a0 []byte, a1 uint16))
	_f(a0, a1)
}
func (_w Wrapper) PutUint32(a0 []byte, a1 uint32) {
	_f := interp.Method("PutUint32", _w.Wrap).(func(a0 []byte, a1 uint32))
	_f(a0, a1)
}
func (_w Wrapper) PutUint64(a0 []byte, a1 uint64) {
	_f := interp.Method("PutUint64", _w.Wrap).(func(a0 []byte, a1 uint64))
	_f(a0, a1)
}
func (_w Wrapper) Uint16(a0 []byte) uint16 {
	_f := interp.Method("Uint16", _w.Wrap).(func(a0 []byte) uint16)
	return _f(a0)
}
func (_w Wrapper) Uint32(a0 []byte) uint32 {
	_f := interp.Method("Uint32", _w.Wrap).(func(a0 []byte) uint32)
	return _f(a0)
}
func (_w Wrapper) Uint64(a0 []byte) uint64 {
	_f := interp.Method("Uint64", _w.Wrap).(func(a0 []byte) uint64)
	return _f(a0)
}
