// Code generated by 'goexports compress/flate'. DO NOT EDIT.

// +build go1.14,!go1.15

package stdlib

import (
	"compress/flate"
	"go/constant"
	"go/token"
	"io"
	"reflect"

	"github.com/containous/yaegi/interp"
)

func init() {
	Symbols["compress/flate"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BestCompression":    reflect.ValueOf(constant.MakeFromLiteral("9", token.INT, 0)),
		"BestSpeed":          reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"DefaultCompression": reflect.ValueOf(constant.MakeFromLiteral("-1", token.INT, 0)),
		"HuffmanOnly":        reflect.ValueOf(constant.MakeFromLiteral("-2", token.INT, 0)),
		"NewReader":          reflect.ValueOf(flate.NewReader),
		"NewReaderDict":      reflect.ValueOf(flate.NewReaderDict),
		"NewWriter":          reflect.ValueOf(flate.NewWriter),
		"NewWriterDict":      reflect.ValueOf(flate.NewWriterDict),
		"NoCompression":      reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),

		// type definitions
		"CorruptInputError": reflect.ValueOf((*flate.CorruptInputError)(nil)),
		"InternalError":     reflect.ValueOf((*flate.InternalError)(nil)),
		"ReadError":         reflect.ValueOf((*flate.ReadError)(nil)),
		"Reader":            reflect.ValueOf((*flate.Reader)(nil)),
		"Resetter":          reflect.ValueOf((*flate.Resetter)(nil)),
		"WriteError":        reflect.ValueOf((*flate.WriteError)(nil)),
		"Writer":            reflect.ValueOf((*flate.Writer)(nil)),
	}
}
func (_w Wrapper) Read(p []byte) (n int, err error) {
	_f := interp.Method("Read", _w.Wrap).(func(p []byte) (n int, err error))
	return _f(p)
}
func (_w Wrapper) ReadByte() (byte, error) {
	_f := interp.Method("ReadByte", _w.Wrap).(func() (byte, error))
	return _f()
}

func (_w Wrapper) Reset(r io.Reader, dict []byte) error {
	_f := interp.Method("Reset", _w.Wrap).(func(r io.Reader, dict []byte) error)
	return _f(r, dict)
}
