// Code generated by 'goexports encoding/gob'. DO NOT EDIT.

// +build go1.14,!go1.15

package stdlib

import (
	"encoding/gob"
	"reflect"

	"github.com/containous/yaegi/interp"
)

func init() {
	Symbols["encoding/gob"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewDecoder":   reflect.ValueOf(gob.NewDecoder),
		"NewEncoder":   reflect.ValueOf(gob.NewEncoder),
		"Register":     reflect.ValueOf(gob.Register),
		"RegisterName": reflect.ValueOf(gob.RegisterName),

		// type definitions
		"CommonType": reflect.ValueOf((*gob.CommonType)(nil)),
		"Decoder":    reflect.ValueOf((*gob.Decoder)(nil)),
		"Encoder":    reflect.ValueOf((*gob.Encoder)(nil)),
		"GobDecoder": reflect.ValueOf((*gob.GobDecoder)(nil)),
		"GobEncoder": reflect.ValueOf((*gob.GobEncoder)(nil)),
	}
}
func (_w Wrapper) GobDecode(a0 []byte) error {
	_f := interp.Method("GobDecode", _w.Wrap).(func(a0 []byte) error)
	return _f(a0)
}

func (_w Wrapper) GobEncode() ([]byte, error) {
	_f := interp.Method("GobEncode", _w.Wrap).(func() ([]byte, error))
	return _f()
}
