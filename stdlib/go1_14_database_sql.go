// Code generated by 'goexports database/sql'. DO NOT EDIT.

// +build go1.14,!go1.15

package stdlib

import (
	"database/sql"
	"reflect"

	"github.com/containous/yaegi/interp"
)

func init() {
	Symbols["database/sql"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Drivers":              reflect.ValueOf(sql.Drivers),
		"ErrConnDone":          reflect.ValueOf(&sql.ErrConnDone).Elem(),
		"ErrNoRows":            reflect.ValueOf(&sql.ErrNoRows).Elem(),
		"ErrTxDone":            reflect.ValueOf(&sql.ErrTxDone).Elem(),
		"LevelDefault":         reflect.ValueOf(sql.LevelDefault),
		"LevelLinearizable":    reflect.ValueOf(sql.LevelLinearizable),
		"LevelReadCommitted":   reflect.ValueOf(sql.LevelReadCommitted),
		"LevelReadUncommitted": reflect.ValueOf(sql.LevelReadUncommitted),
		"LevelRepeatableRead":  reflect.ValueOf(sql.LevelRepeatableRead),
		"LevelSerializable":    reflect.ValueOf(sql.LevelSerializable),
		"LevelSnapshot":        reflect.ValueOf(sql.LevelSnapshot),
		"LevelWriteCommitted":  reflect.ValueOf(sql.LevelWriteCommitted),
		"Named":                reflect.ValueOf(sql.Named),
		"Open":                 reflect.ValueOf(sql.Open),
		"OpenDB":               reflect.ValueOf(sql.OpenDB),
		"Register":             reflect.ValueOf(sql.Register),

		// type definitions
		"ColumnType":     reflect.ValueOf((*sql.ColumnType)(nil)),
		"Conn":           reflect.ValueOf((*sql.Conn)(nil)),
		"DB":             reflect.ValueOf((*sql.DB)(nil)),
		"DBStats":        reflect.ValueOf((*sql.DBStats)(nil)),
		"IsolationLevel": reflect.ValueOf((*sql.IsolationLevel)(nil)),
		"NamedArg":       reflect.ValueOf((*sql.NamedArg)(nil)),
		"NullBool":       reflect.ValueOf((*sql.NullBool)(nil)),
		"NullFloat64":    reflect.ValueOf((*sql.NullFloat64)(nil)),
		"NullInt32":      reflect.ValueOf((*sql.NullInt32)(nil)),
		"NullInt64":      reflect.ValueOf((*sql.NullInt64)(nil)),
		"NullString":     reflect.ValueOf((*sql.NullString)(nil)),
		"NullTime":       reflect.ValueOf((*sql.NullTime)(nil)),
		"Out":            reflect.ValueOf((*sql.Out)(nil)),
		"RawBytes":       reflect.ValueOf((*sql.RawBytes)(nil)),
		"Result":         reflect.ValueOf((*sql.Result)(nil)),
		"Row":            reflect.ValueOf((*sql.Row)(nil)),
		"Rows":           reflect.ValueOf((*sql.Rows)(nil)),
		"Scanner":        reflect.ValueOf((*sql.Scanner)(nil)),
		"Stmt":           reflect.ValueOf((*sql.Stmt)(nil)),
		"Tx":             reflect.ValueOf((*sql.Tx)(nil)),
		"TxOptions":      reflect.ValueOf((*sql.TxOptions)(nil)),
	}
}
func (_w Wrapper) LastInsertId() (int64, error) {
	_f := interp.Method("LastInsertId", _w.Wrap).(func() (int64, error))
	return _f()
}
func (_w Wrapper) RowsAffected() (int64, error) {
	_f := interp.Method("RowsAffected", _w.Wrap).(func() (int64, error))
	return _f()
}

func (_w Wrapper) Scan(src interface{}) error {
	_f := interp.Method("Scan", _w.Wrap).(func(src interface{}) error)
	return _f(src)
}
