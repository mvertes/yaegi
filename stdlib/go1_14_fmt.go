// Code generated by 'goexports fmt'. DO NOT EDIT.

// +build go1.14,!go1.15

package stdlib

import (
	"fmt"
	"reflect"

	"github.com/containous/yaegi/interp"
)

func init() {
	Symbols["fmt"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Errorf":   reflect.ValueOf(fmt.Errorf),
		"Fprint":   reflect.ValueOf(fmt.Fprint),
		"Fprintf":  reflect.ValueOf(fmt.Fprintf),
		"Fprintln": reflect.ValueOf(fmt.Fprintln),
		"Fscan":    reflect.ValueOf(fmt.Fscan),
		"Fscanf":   reflect.ValueOf(fmt.Fscanf),
		"Fscanln":  reflect.ValueOf(fmt.Fscanln),
		"Print":    reflect.ValueOf(fmt.Print),
		"Printf":   reflect.ValueOf(fmt.Printf),
		"Println":  reflect.ValueOf(fmt.Println),
		"Scan":     reflect.ValueOf(fmt.Scan),
		"Scanf":    reflect.ValueOf(fmt.Scanf),
		"Scanln":   reflect.ValueOf(fmt.Scanln),
		"Sprint":   reflect.ValueOf(fmt.Sprint),
		"Sprintf":  reflect.ValueOf(fmt.Sprintf),
		"Sprintln": reflect.ValueOf(fmt.Sprintln),
		"Sscan":    reflect.ValueOf(fmt.Sscan),
		"Sscanf":   reflect.ValueOf(fmt.Sscanf),
		"Sscanln":  reflect.ValueOf(fmt.Sscanln),

		// type definitions
		"Formatter":  reflect.ValueOf((*fmt.Formatter)(nil)),
		"GoStringer": reflect.ValueOf((*fmt.GoStringer)(nil)),
		"ScanState":  reflect.ValueOf((*fmt.ScanState)(nil)),
		"Scanner":    reflect.ValueOf((*fmt.Scanner)(nil)),
		"State":      reflect.ValueOf((*fmt.State)(nil)),
		"Stringer":   reflect.ValueOf((*fmt.Stringer)(nil)),
	}
}

//func (_w Wrapper) Format(f fmt.State, c rune) {
//	_f := interp.Method("Format", _w.Wrap).(func(f fmt.State, c rune))
//	_f(f, c)
//}

func (_w Wrapper) GoString() string {
	_f := interp.Method("GoString", _w.Wrap).(func() string)
	return _f()
}

func (_w Wrapper) ReadRune() (r rune, size int, err error) {
	_f := interp.Method("ReadRune", _w.Wrap).(func() (r rune, size int, err error))
	return _f()
}
func (_w Wrapper) SkipSpace() {
	_f := interp.Method("SkipSpace", _w.Wrap).(func())
	_f()
}
func (_w Wrapper) UnreadRune() error {
	_f := interp.Method("UnreadRune", _w.Wrap).(func() error)
	return _f()
}
func (_w Wrapper) Width() (wid int, ok bool) {
	_f := interp.Method("Width", _w.Wrap).(func() (wid int, ok bool))
	return _f()
}

func (_w Wrapper) Flag(c int) bool {
	_f := interp.Method("Flag", _w.Wrap).(func(c int) bool)
	return _f(c)
}
func (_w Wrapper) Precision() (prec int, ok bool) {
	_f := interp.Method("Precision", _w.Wrap).(func() (prec int, ok bool))
	return _f()
}
func (_w Wrapper) Write(b []byte) (n int, err error) {
	_f := interp.Method("Write", _w.Wrap).(func(b []byte) (n int, err error))
	return _f(b)
}
