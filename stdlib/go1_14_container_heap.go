// Code generated by 'goexports container/heap'. DO NOT EDIT.

// +build go1.14,!go1.15

package stdlib

import (
	"container/heap"
	"reflect"

	"github.com/containous/yaegi/interp"
)

func init() {
	Symbols["container/heap"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Fix":    reflect.ValueOf(heap.Fix),
		"Init":   reflect.ValueOf(heap.Init),
		"Pop":    reflect.ValueOf(heap.Pop),
		"Push":   reflect.ValueOf(heap.Push),
		"Remove": reflect.ValueOf(heap.Remove),

		// type definitions
		"Interface": reflect.ValueOf((*heap.Interface)(nil)),
	}
}
func (_w Wrapper) Len() int {
	_f := interp.Method("Len", _w.Wrap).(func() int)
	return _f()
}
func (_w Wrapper) Less(i int, j int) bool {
	_f := interp.Method("Less", _w.Wrap).(func(i int, j int) bool)
	return _f(i, j)
}
func (_w Wrapper) Pop() interface{} {
	_f := interp.Method("Pop", _w.Wrap).(func() interface{})
	return _f()
}
func (_w Wrapper) Push(x interface{}) {
	_f := interp.Method("Push", _w.Wrap).(func(x interface{}))
	_f(x)
}
func (_w Wrapper) Swap(i int, j int) {
	_f := interp.Method("Swap", _w.Wrap).(func(i int, j int))
	_f(i, j)
}
