// Code generated by 'goexports compress/zlib'. DO NOT EDIT.

// +build go1.14,!go1.15

package stdlib

import (
	"compress/zlib"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["compress/zlib"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BestCompression":    reflect.ValueOf(constant.MakeFromLiteral("9", token.INT, 0)),
		"BestSpeed":          reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"DefaultCompression": reflect.ValueOf(constant.MakeFromLiteral("-1", token.INT, 0)),
		"ErrChecksum":        reflect.ValueOf(&zlib.ErrChecksum).Elem(),
		"ErrDictionary":      reflect.ValueOf(&zlib.ErrDictionary).Elem(),
		"ErrHeader":          reflect.ValueOf(&zlib.ErrHeader).Elem(),
		"HuffmanOnly":        reflect.ValueOf(constant.MakeFromLiteral("-2", token.INT, 0)),
		"NewReader":          reflect.ValueOf(zlib.NewReader),
		"NewReaderDict":      reflect.ValueOf(zlib.NewReaderDict),
		"NewWriter":          reflect.ValueOf(zlib.NewWriter),
		"NewWriterLevel":     reflect.ValueOf(zlib.NewWriterLevel),
		"NewWriterLevelDict": reflect.ValueOf(zlib.NewWriterLevelDict),
		"NoCompression":      reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),

		// type definitions
		"Resetter": reflect.ValueOf((*zlib.Resetter)(nil)),
		"Writer":   reflect.ValueOf((*zlib.Writer)(nil)),
	}
}
