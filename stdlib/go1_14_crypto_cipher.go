// Code generated by 'goexports crypto/cipher'. DO NOT EDIT.

// +build go1.14,!go1.15

package stdlib

import (
	"crypto/cipher"
	"reflect"

	"github.com/containous/yaegi/interp"
)

func init() {
	Symbols["crypto/cipher"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewCBCDecrypter":     reflect.ValueOf(cipher.NewCBCDecrypter),
		"NewCBCEncrypter":     reflect.ValueOf(cipher.NewCBCEncrypter),
		"NewCFBDecrypter":     reflect.ValueOf(cipher.NewCFBDecrypter),
		"NewCFBEncrypter":     reflect.ValueOf(cipher.NewCFBEncrypter),
		"NewCTR":              reflect.ValueOf(cipher.NewCTR),
		"NewGCM":              reflect.ValueOf(cipher.NewGCM),
		"NewGCMWithNonceSize": reflect.ValueOf(cipher.NewGCMWithNonceSize),
		"NewGCMWithTagSize":   reflect.ValueOf(cipher.NewGCMWithTagSize),
		"NewOFB":              reflect.ValueOf(cipher.NewOFB),

		// type definitions
		"AEAD":         reflect.ValueOf((*cipher.AEAD)(nil)),
		"Block":        reflect.ValueOf((*cipher.Block)(nil)),
		"BlockMode":    reflect.ValueOf((*cipher.BlockMode)(nil)),
		"Stream":       reflect.ValueOf((*cipher.Stream)(nil)),
		"StreamReader": reflect.ValueOf((*cipher.StreamReader)(nil)),
		"StreamWriter": reflect.ValueOf((*cipher.StreamWriter)(nil)),
	}
}
func (_w Wrapper) NonceSize() int {
	_f := interp.Method("NonceSize", _w.Wrap).(func() int)
	return _f()
}
func (_w Wrapper) Open(dst []byte, nonce []byte, ciphertext []byte, additionalData []byte) ([]byte, error) {
	_f := interp.Method("Open", _w.Wrap).(func(dst []byte, nonce []byte, ciphertext []byte, additionalData []byte) ([]byte, error))
	return _f(dst, nonce, ciphertext, additionalData)
}
func (_w Wrapper) Overhead() int {
	_f := interp.Method("Overhead", _w.Wrap).(func() int)
	return _f()
}
func (_w Wrapper) Seal(dst []byte, nonce []byte, plaintext []byte, additionalData []byte) []byte {
	_f := interp.Method("Seal", _w.Wrap).(func(dst []byte, nonce []byte, plaintext []byte, additionalData []byte) []byte)
	return _f(dst, nonce, plaintext, additionalData)
}

func (_w Wrapper) BlockSize() int {
	_f := interp.Method("BlockSize", _w.Wrap).(func() int)
	return _f()
}
func (_w Wrapper) Encrypt(dst []byte, src []byte) {
	_f := interp.Method("Encrypt", _w.Wrap).(func(dst []byte, src []byte))
	_f(dst, src)
}

func (_w Wrapper) CryptBlocks(dst []byte, src []byte) {
	_f := interp.Method("CryptBlocks", _w.Wrap).(func(dst []byte, src []byte))
	_f(dst, src)
}

func (_w Wrapper) XORKeyStream(dst []byte, src []byte) {
	_f := interp.Method("XORKeyStream", _w.Wrap).(func(dst []byte, src []byte))
	_f(dst, src)
}
