// Code generated by 'goexports encoding'. DO NOT EDIT.

// +build go1.14,!go1.15

package stdlib

import (
	"encoding"
	"reflect"

	"github.com/containous/yaegi/interp"
)

func init() {
	Symbols["encoding"] = map[string]reflect.Value{
		// type definitions
		"BinaryMarshaler":   reflect.ValueOf((*encoding.BinaryMarshaler)(nil)),
		"BinaryUnmarshaler": reflect.ValueOf((*encoding.BinaryUnmarshaler)(nil)),
		"TextMarshaler":     reflect.ValueOf((*encoding.TextMarshaler)(nil)),
		"TextUnmarshaler":   reflect.ValueOf((*encoding.TextUnmarshaler)(nil)),
	}
}
func (_w Wrapper) MarshalBinary() (data []byte, err error) {
	_f := interp.Method("MarshalBinary", _w.Wrap).(func() (data []byte, err error))
	return _f()
}

func (_w Wrapper) UnmarshalBinary(data []byte) error {
	_f := interp.Method("UnmarshalBinary", _w.Wrap).(func(data []byte) error)
	return _f(data)
}

func (_w Wrapper) MarshalText() (text []byte, err error) {
	_f := interp.Method("MarshalText", _w.Wrap).(func() (text []byte, err error))
	return _f()
}

func (_w Wrapper) UnmarshalText(text []byte) error {
	_f := interp.Method("UnmarshalText", _w.Wrap).(func(text []byte) error)
	return _f(text)
}
