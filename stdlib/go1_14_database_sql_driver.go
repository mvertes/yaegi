// Code generated by 'goexports database/sql/driver'. DO NOT EDIT.

// +build go1.14,!go1.15

package stdlib

import (
	"context"
	"database/sql/driver"
	"reflect"

	"github.com/containous/yaegi/interp"
)

func init() {
	Symbols["database/sql/driver"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Bool":                      reflect.ValueOf(&driver.Bool).Elem(),
		"DefaultParameterConverter": reflect.ValueOf(&driver.DefaultParameterConverter).Elem(),
		"ErrBadConn":                reflect.ValueOf(&driver.ErrBadConn).Elem(),
		"ErrRemoveArgument":         reflect.ValueOf(&driver.ErrRemoveArgument).Elem(),
		"ErrSkip":                   reflect.ValueOf(&driver.ErrSkip).Elem(),
		"Int32":                     reflect.ValueOf(&driver.Int32).Elem(),
		"IsScanValue":               reflect.ValueOf(driver.IsScanValue),
		"IsValue":                   reflect.ValueOf(driver.IsValue),
		"ResultNoRows":              reflect.ValueOf(&driver.ResultNoRows).Elem(),
		"String":                    reflect.ValueOf(&driver.String).Elem(),

		// type definitions
		"ColumnConverter":                reflect.ValueOf((*driver.ColumnConverter)(nil)),
		"Conn":                           reflect.ValueOf((*driver.Conn)(nil)),
		"ConnBeginTx":                    reflect.ValueOf((*driver.ConnBeginTx)(nil)),
		"ConnPrepareContext":             reflect.ValueOf((*driver.ConnPrepareContext)(nil)),
		"Connector":                      reflect.ValueOf((*driver.Connector)(nil)),
		"Driver":                         reflect.ValueOf((*driver.Driver)(nil)),
		"DriverContext":                  reflect.ValueOf((*driver.DriverContext)(nil)),
		"Execer":                         reflect.ValueOf((*driver.Execer)(nil)),
		"ExecerContext":                  reflect.ValueOf((*driver.ExecerContext)(nil)),
		"IsolationLevel":                 reflect.ValueOf((*driver.IsolationLevel)(nil)),
		"NamedValue":                     reflect.ValueOf((*driver.NamedValue)(nil)),
		"NamedValueChecker":              reflect.ValueOf((*driver.NamedValueChecker)(nil)),
		"NotNull":                        reflect.ValueOf((*driver.NotNull)(nil)),
		"Null":                           reflect.ValueOf((*driver.Null)(nil)),
		"Pinger":                         reflect.ValueOf((*driver.Pinger)(nil)),
		"Queryer":                        reflect.ValueOf((*driver.Queryer)(nil)),
		"QueryerContext":                 reflect.ValueOf((*driver.QueryerContext)(nil)),
		"Result":                         reflect.ValueOf((*driver.Result)(nil)),
		"Rows":                           reflect.ValueOf((*driver.Rows)(nil)),
		"RowsAffected":                   reflect.ValueOf((*driver.RowsAffected)(nil)),
		"RowsColumnTypeDatabaseTypeName": reflect.ValueOf((*driver.RowsColumnTypeDatabaseTypeName)(nil)),
		"RowsColumnTypeLength":           reflect.ValueOf((*driver.RowsColumnTypeLength)(nil)),
		"RowsColumnTypeNullable":         reflect.ValueOf((*driver.RowsColumnTypeNullable)(nil)),
		"RowsColumnTypePrecisionScale":   reflect.ValueOf((*driver.RowsColumnTypePrecisionScale)(nil)),
		"RowsColumnTypeScanType":         reflect.ValueOf((*driver.RowsColumnTypeScanType)(nil)),
		"RowsNextResultSet":              reflect.ValueOf((*driver.RowsNextResultSet)(nil)),
		"SessionResetter":                reflect.ValueOf((*driver.SessionResetter)(nil)),
		"Stmt":                           reflect.ValueOf((*driver.Stmt)(nil)),
		"StmtExecContext":                reflect.ValueOf((*driver.StmtExecContext)(nil)),
		"StmtQueryContext":               reflect.ValueOf((*driver.StmtQueryContext)(nil)),
		"Tx":                             reflect.ValueOf((*driver.Tx)(nil)),
		"TxOptions":                      reflect.ValueOf((*driver.TxOptions)(nil)),
		"Value":                          reflect.ValueOf((*driver.Value)(nil)),
		"ValueConverter":                 reflect.ValueOf((*driver.ValueConverter)(nil)),
		"Valuer":                         reflect.ValueOf((*driver.Valuer)(nil)),
	}
}
func (_w Wrapper) ColumnConverter(idx int) driver.ValueConverter {
	_f := interp.Method("ColumnConverter", _w.Wrap).(func(idx int) driver.ValueConverter)
	return _f(idx)
}

func (_w Wrapper) Begin() (driver.Tx, error) {
	_f := interp.Method("Begin", _w.Wrap).(func() (driver.Tx, error))
	return _f()
}
func (_w Wrapper) Close() error {
	_f := interp.Method("Close", _w.Wrap).(func() error)
	return _f()
}
func (_w Wrapper) Prepare(query string) (driver.Stmt, error) {
	_f := interp.Method("Prepare", _w.Wrap).(func(query string) (driver.Stmt, error))
	return _f(query)
}

func (_w Wrapper) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	_f := interp.Method("BeginTx", _w.Wrap).(func(ctx context.Context, opts driver.TxOptions) (driver.Tx, error))
	return _f(ctx, opts)
}

func (_w Wrapper) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	_f := interp.Method("PrepareContext", _w.Wrap).(func(ctx context.Context, query string) (driver.Stmt, error))
	return _f(ctx, query)
}

func (_w Wrapper) Connect(a0 context.Context) (driver.Conn, error) {
	_f := interp.Method("Connect", _w.Wrap).(func(a0 context.Context) (driver.Conn, error))
	return _f(a0)
}
func (_w Wrapper) Driver() driver.Driver {
	_f := interp.Method("Driver", _w.Wrap).(func() driver.Driver)
	return _f()
}

func (_w Wrapper) OpenConnector(name string) (driver.Connector, error) {
	_f := interp.Method("OpenConnector", _w.Wrap).(func(name string) (driver.Connector, error))
	return _f(name)
}

func (_w Wrapper) Exec(query string, args []driver.Value) (driver.Result, error) {
	_f := interp.Method("Exec", _w.Wrap).(func(query string, args []driver.Value) (driver.Result, error))
	return _f(query, args)
}

func (_w Wrapper) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	_f := interp.Method("ExecContext", _w.Wrap).(func(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error))
	return _f(ctx, query, args)
}

func (_w Wrapper) CheckNamedValue(a0 *driver.NamedValue) error {
	_f := interp.Method("CheckNamedValue", _w.Wrap).(func(a0 *driver.NamedValue) error)
	return _f(a0)
}

func (_w Wrapper) Ping(ctx context.Context) error {
	_f := interp.Method("Ping", _w.Wrap).(func(ctx context.Context) error)
	return _f(ctx)
}

func (_w Wrapper) Query(query string, args []driver.Value) (driver.Rows, error) {
	_f := interp.Method("Query", _w.Wrap).(func(query string, args []driver.Value) (driver.Rows, error))
	return _f(query, args)
}

func (_w Wrapper) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	_f := interp.Method("QueryContext", _w.Wrap).(func(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error))
	return _f(ctx, query, args)
}

func (_w Wrapper) Columns() []string {
	_f := interp.Method("Columns", _w.Wrap).(func() []string)
	return _f()
}
func (_w Wrapper) Next(dest []driver.Value) error {
	_f := interp.Method("Next", _w.Wrap).(func(dest []driver.Value) error)
	return _f(dest)
}

func (_w Wrapper) ColumnTypeDatabaseTypeName(index int) string {
	_f := interp.Method("ColumnTypeDatabaseTypeName", _w.Wrap).(func(index int) string)
	return _f(index)
}

func (_w Wrapper) ColumnTypeLength(index int) (length int64, ok bool) {
	_f := interp.Method("ColumnTypeLength", _w.Wrap).(func(index int) (length int64, ok bool))
	return _f(index)
}

func (_w Wrapper) ColumnTypeNullable(index int) (nullable bool, ok bool) {
	_f := interp.Method("ColumnTypeNullable", _w.Wrap).(func(index int) (nullable bool, ok bool))
	return _f(index)
}

func (_w Wrapper) ColumnTypePrecisionScale(index int) (precision int64, scale int64, ok bool) {
	_f := interp.Method("ColumnTypePrecisionScale", _w.Wrap).(func(index int) (precision int64, scale int64, ok bool))
	return _f(index)
}

func (_w Wrapper) ColumnTypeScanType(index int) reflect.Type {
	_f := interp.Method("ColumnTypeScanType", _w.Wrap).(func(index int) reflect.Type)
	return _f(index)
}

func (_w Wrapper) HasNextResultSet() bool {
	_f := interp.Method("HasNextResultSet", _w.Wrap).(func() bool)
	return _f()
}
func (_w Wrapper) NextResultSet() error {
	_f := interp.Method("NextResultSet", _w.Wrap).(func() error)
	return _f()
}

func (_w Wrapper) ResetSession(ctx context.Context) error {
	_f := interp.Method("ResetSession", _w.Wrap).(func(ctx context.Context) error)
	return _f(ctx)
}

func (_w Wrapper) NumInput() int {
	_f := interp.Method("NumInput", _w.Wrap).(func() int)
	return _f()
}

func (_w Wrapper) Commit() error {
	_f := interp.Method("Commit", _w.Wrap).(func() error)
	return _f()
}
func (_w Wrapper) Rollback() error {
	_f := interp.Method("Rollback", _w.Wrap).(func() error)
	return _f()
}

func (_w Wrapper) ConvertValue(v interface{}) (driver.Value, error) {
	_f := interp.Method("ConvertValue", _w.Wrap).(func(v interface{}) (driver.Value, error))
	return _f(v)
}
