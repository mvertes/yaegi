// Code generated by 'goexports image/color'. DO NOT EDIT.

// +build go1.14,!go1.15

package stdlib

import (
	"image/color"
	"reflect"

	"github.com/containous/yaegi/interp"
)

func init() {
	Symbols["image/color"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Alpha16Model": reflect.ValueOf(&color.Alpha16Model).Elem(),
		"AlphaModel":   reflect.ValueOf(&color.AlphaModel).Elem(),
		"Black":        reflect.ValueOf(&color.Black).Elem(),
		"CMYKModel":    reflect.ValueOf(&color.CMYKModel).Elem(),
		"CMYKToRGB":    reflect.ValueOf(color.CMYKToRGB),
		"Gray16Model":  reflect.ValueOf(&color.Gray16Model).Elem(),
		"GrayModel":    reflect.ValueOf(&color.GrayModel).Elem(),
		"ModelFunc":    reflect.ValueOf(color.ModelFunc),
		"NRGBA64Model": reflect.ValueOf(&color.NRGBA64Model).Elem(),
		"NRGBAModel":   reflect.ValueOf(&color.NRGBAModel).Elem(),
		"NYCbCrAModel": reflect.ValueOf(&color.NYCbCrAModel).Elem(),
		"Opaque":       reflect.ValueOf(&color.Opaque).Elem(),
		"RGBA64Model":  reflect.ValueOf(&color.RGBA64Model).Elem(),
		"RGBAModel":    reflect.ValueOf(&color.RGBAModel).Elem(),
		"RGBToCMYK":    reflect.ValueOf(color.RGBToCMYK),
		"RGBToYCbCr":   reflect.ValueOf(color.RGBToYCbCr),
		"Transparent":  reflect.ValueOf(&color.Transparent).Elem(),
		"White":        reflect.ValueOf(&color.White).Elem(),
		"YCbCrModel":   reflect.ValueOf(&color.YCbCrModel).Elem(),
		"YCbCrToRGB":   reflect.ValueOf(color.YCbCrToRGB),

		// type definitions
		"Alpha":   reflect.ValueOf((*color.Alpha)(nil)),
		"Alpha16": reflect.ValueOf((*color.Alpha16)(nil)),
		"CMYK":    reflect.ValueOf((*color.CMYK)(nil)),
		"Color":   reflect.ValueOf((*color.Color)(nil)),
		"Gray":    reflect.ValueOf((*color.Gray)(nil)),
		"Gray16":  reflect.ValueOf((*color.Gray16)(nil)),
		"Model":   reflect.ValueOf((*color.Model)(nil)),
		"NRGBA":   reflect.ValueOf((*color.NRGBA)(nil)),
		"NRGBA64": reflect.ValueOf((*color.NRGBA64)(nil)),
		"NYCbCrA": reflect.ValueOf((*color.NYCbCrA)(nil)),
		"Palette": reflect.ValueOf((*color.Palette)(nil)),
		"RGBA":    reflect.ValueOf((*color.RGBA)(nil)),
		"RGBA64":  reflect.ValueOf((*color.RGBA64)(nil)),
		"YCbCr":   reflect.ValueOf((*color.YCbCr)(nil)),
	}
}
func (_w Wrapper) RGBA() (r uint32, g uint32, b uint32, a uint32) {
	_f := interp.Method("RGBA", _w.Wrap).(func() (r uint32, g uint32, b uint32, a uint32))
	return _f()
}

func (_w Wrapper) Convert(c color.Color) color.Color {
	_f := interp.Method("Convert", _w.Wrap).(func(c color.Color) color.Color)
	return _f(c)
}
